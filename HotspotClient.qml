import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Dialogs
import MyServer 1.0  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–æ–¥—É–ª—å, —á—Ç–æ –∏ –≤ main.cpp

Page {
    id: hotspotPage
    header: ToolBar {
        RowLayout {
            anchors.fill: parent
            ToolButton {
                text: "‚Üê –ù–∞–∑–∞–¥"
                onClicked: stackView.pop()
            }
            Label {
                Layout.fillWidth: true
                text: "üåê –û–±–º–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
            }
        }
    }

    HotspotChat {
        id: hotspotChat

        onRedirected: (url) => {
            console.log("Redirected to:", url)
            addressField.text = url
            statusLabel.text = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–∏—Ä—É: " + url
            statusLabel.color = "green"
            greetAddress(url)
            addressField.focus = false
            resetStatusTimer.start()
        }

        onMessagesChanged: {
            if (hotspotChat.messages.length > 0) {
                let lastMessage = hotspotChat.messages[hotspotChat.messages.length - 1]
                if (lastMessage.from === "remote" && lastMessage.type === "file") {
                    transfersModel.append({
                        "fileName": lastMessage.text,
                        "status": "‚úì –ü–æ–ª—É—á–µ–Ω",
                        "time": new Date().toLocaleTimeString(),
                        "type": "received",
                        "filePath": lastMessage.path
                    })
                    statusLabel.text = "üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: " + lastMessage.text
                    statusLabel.color = "blue"
                    resetStatusTimer.start()
                }
            }
        }

        onConnectionStateChanged: {
            updateConnectionStatus()
        }

        Component.onCompleted: {
            updateConnectionStatus()
            greetAddress("h://94.159.103.63:17172")
        }
    }

    ListModel {
        id: transfersModel
    }

    function updateConnectionStatus() {
        switch(hotspotChat.connectionState) {
            case HotspotChat.Disconnected:
                statusLabel.text = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
                statusLabel.color = "red"
                connectionStatus.text = "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                connectionIndicator.color = "red"
                break
            case HotspotChat.ConnectedToRouter:
                statusLabel.text = "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Ä–∞..."
                statusLabel.color = "orange"
                connectionStatus.text = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Ä–∞"
                connectionIndicator.color = "orange"
                break
            case HotspotChat.ConnectedToPeer:
                statusLabel.text = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–∏—Ä—É"
                statusLabel.color = "green"
                connectionStatus.text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                connectionIndicator.color = "green"
                break
        }
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 20
        spacing: 15

        // –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–£–¢–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø
        GroupBox {
            Layout.fillWidth: true
            title: "üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"

            RowLayout {
                width: parent.width

                Button {
                    text: "üìÅ –í—ã–±—Ä–∞—Ç—å –ø—É—Ç—å"
                    onClicked: folderDialog.open()
                }

                Label {
                    Layout.fillWidth: true
                    text: "–ü—É—Ç—å: " + (hotspotChat.pathManager ? hotspotChat.pathManager.savePath : "–ó–∞–≥—Ä—É–∑–∫–∏")
                    elide: Text.ElideLeft
                    wrapMode: Text.Wrap
                    color: "blue"
                    font.pixelSize: 12
                }
            }
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        GroupBox {
            Layout.fillWidth: true
            title: "üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

            ColumnLayout {
                width: parent.width
                spacing: 10

                RowLayout {
                    Label {
                        text: "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç:"
                        font.bold: true
                    }
                    Label {
                        text: hotspotChat.port
                        color: "blue"
                    }
                    Rectangle {
                        width: 12
                        height: 12
                        radius: 6
                        color: connectionIndicator.color
                        id: connectionIndicator
                    }
                    Label {
                        text: connectionStatus.text
                        color: connectionIndicator.color
                        font.bold: true
                        id: connectionStatus
                    }
                }

                Label {
                    text: "Relay —Å–µ—Ä–≤–µ—Ä: 94.159.103.63:17172"
                    font.pixelSize: 12
                    color: "gray"
                }
            }
        }

        // –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
                GroupBox {
                    Layout.fillWidth: true
                    title: "üéØ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏—Ä—É"

                    ColumnLayout {
                        width: parent.width
                        spacing: 10

                        TextField {
                            id: addressField
                            Layout.fillWidth: true
                            placeholderText: "h://192.168.1.100:12345"
                            text: "h://127.0.0.1:17171"
                        }

                        RowLayout {
                            Button {
                                text: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"
                                onClicked: {
                                    if (addressField.text) {
                                        hotspotChat.greetAddress(addressField.text)
                                        statusLabel.text = "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ..."
                                        statusLabel.color = "blue"
                                    }
                                }
                            }

                            Button {
                                text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                                enabled: messageField.text.length > 0 && hotspotChat.connected
                                onClicked: {
                                    hotspotChat.send(messageField.text)
                                    messageField.text = ""
                                }
                            }
                        }

                        TextField {
                            id: messageField
                            Layout.fillWidth: true
                            placeholderText: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                            enabled: hotspotChat.connected
                        }
                    }
                }

                // –°—Ç–∞—Ç—É—Å
                Label {
                    id: statusLabel
                    Layout.fillWidth: true
                    text: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–±–æ—Ç–µ..."
                    color: "gray"
                    horizontalAlignment: Text.AlignHCenter
                    wrapMode: Text.Wrap
                    font.pixelSize: 14
                }

                // –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
                GroupBox {
                    Layout.fillWidth: true
                    title: "üìÅ –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤"

                    ColumnLayout {
                        width: parent.width
                        spacing: 10

                        Button {
                            Layout.fillWidth: true
                            text: "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
                            enabled: hotspotChat.connected
                            onClicked: fileDialog.open()

                            background: Rectangle {
                                color: parent.enabled ? (parent.down ? "#4CAF50" : "#8BC34A") : "#cccccc"
                                radius: 5
                            }
                        }

                        Label {
                            text: "–ò–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ"
                            font.pixelSize: 11
                            color: "gray"
                            horizontalAlignment: Text.AlignHCenter
                            Layout.fillWidth: true
                        }
                    }
                }

                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                Rectangle {
                    Layout.fillWidth: true
                    height: 1
                    color: "#e0e0e0"
                }

        // –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞—á
        GroupBox {
            Layout.fillWidth: true
            Layout.fillHeight: true
            title: "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞—á (" + transfersModel.count + ")"

            ColumnLayout {
                anchors.fill: parent
                spacing: 5

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                RowLayout {
                    Layout.fillWidth: true
                    Label {
                        text: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + sentCount
                        color: "green"
                        font.pixelSize: 12
                    }
                    Label {
                        text: "–ü–æ–ª—É—á–µ–Ω–æ: " + receivedCount
                        color: "blue"
                        font.pixelSize: 12
                    }
                    Item { Layout.fillWidth: true }
                    Button {
                        text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å"
                        enabled: transfersModel.count > 0
                        onClicked: transfersModel.clear()
                    }
                }

                ScrollView {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    clip: true

                    ListView {
                        id: listView
                        width: parent.width
                        model: transfersModel
                        spacing: 5

                        delegate: Rectangle {
                            width: ListView.view.width
                            height: 60
                            radius: 8
                            color: {
                                if (type === "received") return "#e8f5e8"
                                else if (type === "sent") return "#fff3e0"
                                else return "#f0f0f0"
                            }
                            border.color: {
                                if (type === "received") return "#4CAF50"
                                else if (type === "sent") return "#FF9800"
                                else return "#cccccc"
                            }
                            border.width: 1

                            RowLayout {
                                anchors.fill: parent
                                anchors.margins: 8
                                spacing: 10

                                Label {
                                    text: {
                                        if (type === "received") return "üì•"
                                        else if (type === "sent") return "üì§"
                                        else return "‚ÑπÔ∏è"
                                    }
                                    font.pixelSize: 18
                                }

                                ColumnLayout {
                                    Layout.fillWidth: true
                                    spacing: 2

                                    Label {
                                        text: fileName
                                        elide: Text.ElideMiddle
                                        font.bold: true
                                        Layout.fillWidth: true
                                    }

                                    RowLayout {
                                        Label {
                                            text: "–í—Ä–µ–º—è: " + time
                                            font.pixelSize: 10
                                            color: "gray"
                                        }
                                        Item { Layout.fillWidth: true }
                                        Label {
                                            text: status
                                            color: status.includes("‚úì") ? "green" : "orange"
                                            font.pixelSize: 10
                                            font.bold: true
                                        }
                                    }
                                }

                                Button {
                                    visible: type === "received" && filePath
                                    text: "üìÇ"
                                    ToolTip.visible: hovered
                                    ToolTip.text: "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"
                                    onClicked: {
                                        if (filePath) {
                                            Qt.openUrlExternally(filePath)
                                        }
                                    }
                                }
                            }
                        }

                        // –û–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                        opacity: dropArea.containsDrag ? 0.7 : 1.0

                        DropArea {
                            id: dropArea
                            anchors.fill: parent
                            enabled: hotspotChat.connected

                            onEntered: (drag) => {
                                if (drag.hasUrls) {
                                    drag.accept()
                                }
                            }

                            onDropped: (drop) => {
                                for (let i = 0; i < drop.urls.length; i++) {
                                    let url = drop.urls[i]
                                    hotspotChat.sendFile(url)

                                    let fileName = url.toString()
                                    fileName = fileName.substring(fileName.lastIndexOf("/") + 1)
                                    if (fileName.startsWith("file://")) {
                                        fileName = fileName.substring(7)
                                    }

                                    transfersModel.append({
                                        "fileName": fileName,
                                        "status": "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...",
                                        "time": new Date().toLocaleTimeString(),
                                        "type": "sent"
                                    })
                                }
                            }

                            Rectangle {
                                anchors.fill: parent
                                color: "transparent"
                                border.color: dropArea.containsDrag ? "#2196F3" : "transparent"
                                border.width: 2
                                radius: 5

                                Label {
                                    anchors.centerIn: parent
                                    text: "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞"
                                    color: "#666"
                                    font.pixelSize: 16
                                    visible: dropArea.containsDrag
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // –î–ò–ê–õ–û–ì –í–´–ë–û–†–ê –ü–ê–ü–ö–ò
       FolderDialog {
           id: folderDialog
           title: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"

           onAccepted: {
               if (hotspotChat.pathManager) {
                   var folderPath = selectedFolder.toString();
                   if (folderPath.startsWith("file:///")) {
                       folderPath = folderPath.substring(8);
                   }
                   hotspotChat.pathManager.setSavePath(folderPath);
               }
           }
       }

       // –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
       FileDialog {
           id: fileDialog
           title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
           nameFilters: ["–í—Å–µ —Ñ–∞–π–ª—ã (*)"]
           fileMode: FileDialog.OpenFiles

           onAccepted: {
               for (let i = 0; i < selectedFiles.length; i++) {
                   let fileUrl = selectedFiles[i]
                   hotspotChat.sendFile(fileUrl)

                   let fileName = fileUrl.toString()
                   fileName = fileName.substring(fileName.lastIndexOf("/") + 1)
                   if (fileName.startsWith("file://")) {
                       fileName = fileName.substring(7)
                   }

                   transfersModel.append({
                       "fileName": fileName,
                       "status": "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...",
                       "time": new Date().toLocaleTimeString(),
                       "type": "sent"
                   })
               }
           }
       }

       // –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
       Timer {
           id: resetStatusTimer
           interval: 5000
           onTriggered: {
               updateConnectionStatus()
           }
       }

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    property int sentCount: {
        let count = 0
        for (let i = 0; i < transfersModel.count; i++) {
            if (transfersModel.get(i).type === "sent") count++
        }
        return count
    }

    property int receivedCount: {
        let count = 0
        for (let i = 0; i < transfersModel.count; i++) {
            if (transfersModel.get(i).type === "received") count++
        }
        return count
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    Component.onCompleted: {
        if (transfersModel.count === 0) {
            transfersModel.append({
                "fileName": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ–±–º–µ–Ω–∞!",
                "status": "‚ÑπÔ∏è",
                "time": new Date().toLocaleTimeString(),
                "type": "info"
            })
        }
    }
}
